---
description: 
globs: 
alwaysApply: false
---
 # Family Fun Plannings UI Design Pattern

---
globs: ["src/app/components/**/*.html"]
---

## Design System Overview

This document defines the comprehensive UI design system for the Family Fun Plannings Angular application, providing consistent patterns for creating cohesive UI components.

## Layout Patterns

### Page Structure
```html
<div class="min-h-screen bg-gray-50 dark:bg-gray-900">
  <!-- Header -->
  <app-header></app-header>
  
  <!-- Main Content -->
  <main class="container mx-auto px-4 py-6">
    <!-- Content goes here -->
  </main>
  
  <!-- Footer (Desktop Only) -->
  <app-footer></app-footer>
  
  <!-- Bottom Navigation (Mobile Only) -->
  <app-bottom-nav></app-bottom-nav>
</div>
```

### Content Containers

#### Full-Screen Container (Authentication Pages)
```html
<div class="min-h-screen flex items-center justify-center bg-gray-900 p-4">
  <!-- Content goes here -->
</div>
```

#### Content Card
```html
<div class="w-full max-w-md bg-white rounded-2xl shadow-xl p-8 space-y-6">
  <!-- Card content goes here -->
</div>
```

#### Section Container
```html
<section class="mb-8">
  <h2 class="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6">
    Section Title
  </h2>
  <!-- Section content -->
</section>
```

## Component Design

### Headers & Navigation

#### Desktop Header
```html
<header class="fixed top-0 left-0 right-0 z-50 bg-blue-900 text-white">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <a routerLink="/home" class="flex items-center">
        <span class="text-xl font-bold text-white">FamilyFunPlanner</span>
      </a>
      
      <!-- Navigation Links -->
      <nav class="hidden md:flex space-x-6">
        <a routerLink="/path" class="text-white hover:text-blue-200 transition-colors">
          Link Text
        </a>
      </nav>
      
      <!-- Right side elements -->
    </div>
  </div>
</header>
```

#### Mobile Bottom Navigation
```html
<nav class="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800 md:hidden z-50">
  <div class="grid grid-cols-4 h-16">
    <a [routerLink]="item.route" class="flex flex-col items-center justify-center" 
       [class.text-blue-600]="isActive(item.route)"
       [class.text-gray-600]="!isActive(item.route)">
      <!-- Icon SVG goes here -->
      <span class="text-xs mt-1">Label</span>
    </a>
  </div>
</nav>
```

### Form Elements

#### Form Container
```html
<form [formGroup]="formName" (ngSubmit)="onSubmit()" class="space-y-4">
  <!-- Form fields go here -->
</form>
```

#### Text Input Field
```html
<div>
  <label for="fieldId" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
    Label
  </label>
  <div class="relative">
    <input
      id="fieldId"
      type="text"
      formControlName="fieldName"
      class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
      [ngClass]="{
        'border-red-500': hasError('fieldName'),
        'border-gray-300 dark:border-gray-700': !hasError('fieldName')
      }"
      placeholder="Placeholder text"
    >
    <!-- Error message -->
    <div *ngIf="hasError('fieldName')" class="text-red-500 text-sm mt-1">
      {{ getErrorMessage('fieldName') }}
    </div>
  </div>
</div>
```

#### Password Field
```html
<div>
  <label for="password" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
    Password
  </label>
  <div class="relative">
    <input
      id="password"
      [type]="showPassword ? 'text' : 'password'"
      formControlName="password"
      class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors pr-10"
      [ngClass]="{
        'border-red-500': hasError('password'),
        'border-gray-300 dark:border-gray-700': !hasError('password')
      }"
      placeholder="••••••"
    >
    <!-- Toggle password visibility button -->
    <button
      type="button"
      (click)="togglePasswordVisibility()"
      class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none"
      aria-label="Toggle password visibility"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5"
        [class.hidden]="showPassword"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
        <path
          fill-rule="evenodd"
          d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
          clip-rule="evenodd"
        />
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5"
        [class.hidden]="!showPassword"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fill-rule="evenodd"
          d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z"
          clip-rule="evenodd"
        />
        <path
          d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z"
        />
      </svg>
    </button>
    <!-- Error message -->
    <div *ngIf="hasError('password')" class="text-red-500 text-sm mt-1">
      {{ getErrorMessage('password') }}
    </div>
  </div>
</div>
```

#### Textarea
```html
<div>
  <label for="textareaId" class="block text-sm font-medium text-gray-700 dark:text-white mb-1">
    Label
  </label>
  <div class="relative">
    <textarea
      id="textareaId"
      formControlName="fieldName"
      rows="3"
      class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
      [ngClass]="{
        'border-red-500': hasError('fieldName'),
        'border-gray-300 dark:border-gray-700': !hasError('fieldName')
      }"
      placeholder="Enter text here..."
    ></textarea>
    <div *ngIf="hasError('fieldName')" class="text-red-500 dark:text-red-400 text-sm mt-1">
      {{ getErrorMessage('fieldName') }}
    </div>
  </div>
</div>
```

### Buttons

#### Primary Button
```html
<button
  type="submit"
  class="w-full bg-blue-600 text-white rounded-lg px-4 py-2 font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
  [disabled]="isSubmitting"
>
  <span *ngIf="!isSubmitting">Button Text</span>
  <span *ngIf="isSubmitting" class="flex items-center justify-center">
    <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    Loading...
  </span>
</button>
```

#### Secondary Button
```html
<button
  type="button"
  class="bg-yellow-400 hover:bg-yellow-500 text-black font-medium text-sm px-4 py-2 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-yellow-300 focus:ring-offset-2 flex items-center justify-center"
>
  Button Text
  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
  </svg>
</button>
```

#### Text Button
```html
<button
  type="button"
  class="text-sm font-medium text-blue-600 hover:text-blue-500 focus:outline-none focus:underline transition-colors"
>
  Button Text
</button>
```

### Cards and Content Containers

#### Activity Card
```html
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
  <!-- Card Image -->
  <div class="relative h-48 bg-gray-200 dark:bg-gray-700">
    <img
      [src]="imageUrl"
      [alt]="imageAlt"
      class="h-full w-full object-cover"
      onerror="this.src='https://via.placeholder.com/400x300?text=Placeholder'"
    />
    <!-- Badges / Overlays (positioned absolutely) -->
  </div>
  
  <!-- Card Content -->
  <div class="p-4">
    <!-- Title -->
    <h3 class="text-lg font-semibold text-gray-800 dark:text-white mb-2">
      Card Title
    </h3>
    
    <!-- Description -->
    <p class="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
      Card description text goes here...
    </p>
    
    <!-- Tags/Badges -->
    <div class="flex flex-wrap gap-2 mb-4">
      <span class="text-xs bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full flex items-center">
        <!-- Optional icon -->
        Tag Text
      </span>
    </div>
    
    <!-- Card Actions -->
    <div class="flex w-full">
      <!-- Action button -->
    </div>
  </div>
</div>
```

### Status Indicators & Alerts

#### Success Alert
```html
<div class="bg-green-100 dark:bg-green-900/30 border border-green-400 dark:border-green-800 text-green-700 dark:text-green-200 px-4 py-3 rounded relative" role="alert">
  <span class="block sm:inline">Success message goes here.</span>
</div>
```

#### Error Alert
```html
<div class="bg-red-100 dark:bg-red-900/30 border border-red-400 dark:border-red-800 text-red-700 dark:text-red-200 px-4 py-3 rounded relative" role="alert">
  <span class="block sm:inline">Error message goes here.</span>
</div>
```

#### Info Alert
```html
<div class="bg-blue-100 dark:bg-blue-900/30 border border-blue-400 dark:border-blue-800 text-blue-700 dark:text-blue-200 px-4 py-3 rounded relative" role="alert">
  <span class="block sm:inline">Information message goes here.</span>
</div>
```

### Dialogs & Modals

```html
<div
  *ngIf="showDialog"
  class="fixed inset-0 bg-black/60 backdrop-blur-lg flex items-center justify-center z-[9999] overflow-y-auto overflow-x-hidden transition-all duration-300"
  (click)="onClose()"
  aria-modal="true"
  role="dialog"
>
  <!-- Modal Content -->
  <div
    class="relative bg-gradient-to-br from-gray-800/95 to-gray-900/95 backdrop-blur-xl rounded-3xl shadow-2xl shadow-blue-500/10 p-0 w-full m-4 transform transition-all duration-500 scale-100 hover:scale-[1.01] max-w-md"
    (click)="onDialogClick($event)"
    tabindex="-1"
    style="max-height: calc(100vh - 2rem)"
  >
    <!-- Modal Header -->
    <div
      class="sticky top-0 px-8 py-5 border-b border-gray-700/30 flex items-center justify-between bg-gradient-to-r from-gray-800/50 to-gray-900/50 backdrop-blur-xl rounded-t-3xl"
    >
      <h3 class="text-2xl font-bold text-white tracking-tight">
        Modal Title
      </h3>
      <button
        (click)="onClose()"
        class="text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 focus:ring-offset-gray-800 rounded-full p-2 transition-all duration-300 hover:bg-gray-700/30"
        aria-label="Close dialog"
      >
        <svg
          class="w-6 h-6 transform hover:rotate-90 transition-transform duration-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          ></path>
        </svg>
      </button>
    </div>

    <!-- Modal Body -->
    <div
      class="px-8 py-6 bg-gradient-to-b from-gray-800/80 to-gray-900/80 backdrop-blur-xl overflow-y-auto text-gray-100"
      style="max-height: calc(100vh - 10rem)"
    >
      <div class="prose prose-invert max-w-none">
        <!-- Modal content goes here -->
      </div>
    </div>
  </div>
</div>
```

### Dividers & Separators

#### Section Divider with Text
```html
<div class="relative">
  <div class="absolute inset-0 flex items-center">
    <div class="w-full border-t border-gray-300 dark:border-gray-700"></div>
  </div>
  <div class="relative flex justify-center text-sm">
    <span class="px-2 bg-white dark:bg-gray-900 text-gray-500 dark:text-gray-400">Section Title</span>
  </div>
</div>
```

## Color Scheme

### Brand Colors
- **Primary**: blue-600 (`#2563eb`), hover: blue-700 (`#1d4ed8`)
- **Secondary**: yellow-400 (`#facc15`), hover: yellow-500 (`#eab308`)
- **Accent**: indigo-600 (`#4f46e5`)

### Neutral Colors
- **Background**: 
  - Light: gray-50 (`#f9fafb`)
  - Dark: gray-900 (`#111827`)
- **Card Backgrounds**:
  - Light: white (`#ffffff`)
  - Dark: gray-800 (`#1f2937`)
- **Text**:
  - Headings: 
    - Light: gray-900 (`#111827`)
    - Dark: white (`#ffffff`) or gray-100 (`#f3f4f6`)
  - Body: 
    - Light: gray-600 (`#4b5563`)
    - Dark: gray-300 (`#d1d5db`)
  - Subtle: 
    - Light: gray-500 (`#6b7280`)
    - Dark: gray-400 (`#9ca3af`)

### Status Colors
- **Success**: 
  - Background: green-100 (`#dcfce7`), dark: green-900/30
  - Border: green-400 (`#4ade80`), dark: green-800
  - Text: green-700 (`#15803d`), dark: green-200
- **Error**: 
  - Background: red-100 (`#fee2e2`), dark: red-900/30
  - Border: red-400 (`#f87171`), dark: red-800
  - Text: red-700 (`#b91c1c`), dark: red-200
- **Info**: 
  - Background: blue-100 (`#dbeafe`), dark: blue-900/30
  - Border: blue-400 (`#60a5fa`), dark: blue-800
  - Text: blue-700 (`#1d4ed8`), dark: blue-200

### Interactive Elements
- **Buttons**:
  - Primary: blue-600 (`#2563eb`), hover: blue-700 (`#1d4ed8`)
  - Secondary: yellow-400 (`#facc15`), hover: yellow-500 (`#eab308`)
  - Text Buttons: blue-600 (`#2563eb`), hover: blue-500 (`#3b82f6`)
- **Links**: blue-600 (`#2563eb`), hover: blue-500 (`#3b82f6`)
- **Focus States**: focus:ring-2 focus:ring-blue-500 focus:ring-offset-2

## Typography

### Font Family
- System font stack (tailwind default): `-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif`

### Font Sizes
- **Headings**:
  - H1: `text-3xl md:text-4xl` (1.875rem/2.25rem, md: 2.25rem/2.5rem)
  - H2: `text-2xl` (1.5rem/2rem)
  - H3: `text-lg` (1.125rem/1.75rem)
  - Card Titles: `text-lg` (1.125rem/1.75rem)
- **Body**:
  - Regular: `text-base` (1rem/1.5rem)
  - Small: `text-sm` (0.875rem/1.25rem)
  - Extra Small: `text-xs` (0.75rem/1rem)

### Font Weights
- **Bold/Headings**: `font-bold` (700)
- **Semi-Bold**: `font-semibold` (600)
- **Medium**: `font-medium` (500)
- **Regular**: `font-normal` (400)

### Line Heights
- Default line heights from Tailwind's text size utilities
- Specific adjustments for headings with `leading-tight`

## Interactive Elements

### Button States
- **Default**: Standard styling with brand colors
- **Hover**: Darker shade of the button color (`hover:bg-blue-700`)
- **Focus**: Ring outline (`focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`)
- **Disabled**: Reduced opacity (`disabled:opacity-50`) and not-allowed cursor (`disabled:cursor-not-allowed`)
- **Loading**: Animated spinner with descriptive text

### Link States
- **Default**: Text in blue-600 (`text-blue-600`)
- **Hover**: Lighter shade (`hover:text-blue-500`) or underline (`hover:underline`)
- **Focus**: Outline or underline (`focus:outline-none focus:underline`)

### Form Field States
- **Default**: Standard border (`border-gray-300`)
- **Focus**: Blue ring and border (`focus:ring-2 focus:ring-blue-500 focus:border-blue-500`)
- **Error**: Red border (`border-red-500`) with error message text (`text-red-500`)
- **Disabled**: Reduced opacity and not-allowed cursor

### Card/Interactive Container States
- **Default**: Standard shadow (`shadow-md`)
- **Hover**: Larger shadow (`hover:shadow-lg`) with slight upward movement (`hover:-translate-y-1`)
- **Active/Selected**: Custom styling based on context

## Iconography

### Icon System
- Custom SVG icons embedded directly in components
- Icons are sized consistently: 
  - Small: `h-4 w-4`
  - Medium: `h-5 w-5`
  - Large: `h-6 w-6`
- Icons use `currentColor` to inherit text color
- Interactive icons have hover states

### Common Icons
- Navigation icons for mobile navigation
- Action icons (edit, delete, search, close, etc.)
- Status icons (success, error, warning)
- Category/feature specific icons (weather, calendar, etc.)

## Spacing and Padding

### Container Spacing
- Page padding: `p-4`
- Content container max width: `max-w-md` (28rem), `max-w-3xl` (48rem) for larger content
- Section spacing: `mb-8` or `space-y-6`

### Component Internal Spacing
- Card padding: `p-4` (small) or `p-8` (large)
- Button padding: `px-4 py-2`
- Input field padding: `px-4 py-2`
- Spacing between form fields: `space-y-4`
- Spacing between sections: `space-y-6` or `mb-6`
- List item spacing: `space-y-6`

### Margin/Padding Scale
Following the Tailwind default scale:
- Extra small: 1 (0.25rem)
- Small: 2 (0.5rem)
- Medium: 4 (1rem)
- Large: 6 (1.5rem)
- Extra large: 8 (2rem)
- 2x Extra large: 10 (2.5rem)

## Responsive Design

### Breakpoints
Following Tailwind's default breakpoints:
- sm: 640px
- md: 768px
- lg: 1024px
- xl: 1280px
- 2xl: 1536px

### Mobile-First Approach
- Base styles designed for mobile
- Responsive adjustments with breakpoint prefixes (`md:`, `lg:`, etc.)

### Key Responsive Patterns
- **Navigation**:
  - Mobile: Bottom navigation bar with icons and labels
  - Desktop: Top header with horizontal navigation links
- **Layout**:
  - Mobile: Single column layout, full-width cards
  - Desktop: Multi-column grid or wider centered content
- **Typography**:
  - Mobile: Smaller headings (`text-3xl`)
  - Desktop: Larger headings (`md:text-4xl`)
- **Interactive Elements**:
  - Buttons and inputs maintain consistent size across devices
  - Touch targets are appropriately sized for mobile (min 44px)

### Hiding/Showing Elements
- Mobile only: `md:hidden`
- Desktop only: `hidden md:block`

## Angular-Specific Patterns

### Component Structure
- Each component follows a consistent template structure
- Components use Angular standalone component pattern where appropriate
- Components follow smart/presentational pattern:
  - Container components handle data and logic
  - Presentational components receive data via inputs and emit events

### Directives and Structural Patterns
- `*ngIf` for conditional rendering
- `*ngFor` for list rendering with `trackBy`
- `[ngClass]` for conditional class application
- `[formGroup]` and `formControlName` for form handling

### Event Handling
- `(click)`, `(submit)`, and other event bindings
- Custom event emitters with `(eventName)` syntax
- `$event.stopPropagation()` where needed

### Angular-Specific Features
- Router links with `[routerLink]` and active states
- Reactive forms with form controls and validation
- Component-to-component communication via services

## Accessibility

### Focus States
- All interactive elements have visible focus states
- Custom focus styles using `focus:ring-2 focus:ring-blue-500`

### ARIA Attributes
- `aria-label` for buttons without visible text
- `aria-modal="true"` and `role="dialog"` for modals
- `role="alert"` for notification messages

### Color Contrast
- Text colors meet WCAG 2.1 AA standards
- Dark mode provides appropriate contrast ratios

### Keyboard Navigation
- Tab navigation works properly with logical tab order
- Focus trap for modal dialogs

## CSS/Styling Conventions

### TailwindCSS Usage
- Utility-first approach with Tailwind CSS classes
- Dark mode supported via `dark:` prefix classes
- Responsive design via breakpoint prefixes
- Custom components via composition of utility classes

### Class Organization
- Positioning and layout classes first
- Sizing and spacing classes next
- Typography and text styling classes after
- Visual styling (colors, shadows) classes last
- Interactive state classes at the end

### Common Class Combinations
- Flexbox: `flex items-center justify-center`
- Grid: `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4`
- Transitions: `transition-all duration-300`
- Focus styles: `focus:outline-none focus:ring-2 focus:ring-blue-500`

## Design Tokens and Reusable Patterns

This design system uses consistent visual tokens throughout:

1. **Rounded Corners**:
   - Small elements: `rounded-lg` (0.5rem)
   - Cards and containers: `rounded-2xl` (1rem)
   - Pills and badges: `rounded-full`

2. **Shadows**:
   - Light: `shadow-md`
   - Medium: `shadow-lg`
   - Emphasized: `shadow-xl`

3. **Transitions**:
   - Standard: `transition-colors`, `transition-all`
   - Duration: `duration-300`
   - Custom: `transform hover:scale-[1.01]`

4. **Gradients**:
   - Subtle backgrounds: `bg-gradient-to-br from-gray-800/95 to-gray-900/95`
   - Accent elements: `bg-gradient-to-r from-blue-500 to-indigo-600`